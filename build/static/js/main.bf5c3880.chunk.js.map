{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Person.js","components/Persons.js","services/contacts.js","components/Notification.js","App.js","index.js"],"names":["Filter","props","className","htmlFor","id","value","newFilter","onChange","handleSearchChange","PersonForm","onSubmit","addName","newName","handleNameChange","newNumber","handleNumberChange","type","Person","person","name","number","onClick","remove","Persons","filteredList","persons","filter","toLowerCase","includes","personList","map","length","baseUrl","requests","create","newContact","axios","post","then","response","data","delete","concat","update","put","Notification","errorMessage","message","success","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","setErrorMessage","useEffect","get","bookService","isInputValid","alert","event","target","preventDefault","createdContact","setTimeout","catch","error","console","log","addToServer","contact","window","confirm","updatedContacts","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf5c3880.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = (props) => {\n  return (\n    <div className=\"searchFilter flexItem\">\n      <label htmlFor=\"search\">Search for a name:</label>\n      <input\n        id=\"search\"\n        value={props.newFilter}\n        onChange={props.handleSearchChange} />\n    </div>\n  )\n}\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addName}>\n      <div className=\"formInput flexItem\">\n        <label htmlFor=\"name\">name:</label>\n        <input\n          id=\"name\"\n          value={props.newName}\n          onChange={props.handleNameChange} />\n      </div>\n      <div className=\"formInput flexItem\">\n        <label htmlFor=\"\">number:</label>\n        <input\n          id=\"number\"\n          value={props.newNumber}\n          onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Person = (props) => {\n  return (\n    <li className=\"flexItem\">\n      <span>{props.person.name}</span>\n      <span className=\"numberRemove\">\n        {props.person.number}\n        <button onClick={() => props.remove(props.person)}>remove</button>\n      </span>\n\n    </li>\n  )\n}\n\nexport default Person","import React from 'react'\nimport Person from './Person';\n\nconst Persons = (props) => {\n  const filteredList = props.persons.filter((person) =>\n    person.name.toLowerCase().includes(props.newFilter.toLowerCase())\n  );\n\n  const personList = filteredList.map(\n    (person) => <Person key={person.id} person={person} remove={props.remove} />)\n\n  return (\n    <ul className='list'>\n      {filteredList.length ? personList\n        : \"There's no match for the query search\"}\n    </ul>\n  );\n}\n\nexport default Persons","// Set of functions create, remove and update contacts in the server\nimport axios from 'axios'\n// const baseUrl = 'http://localhost:3001/api/persons'\nconst baseUrl = '/api/persons'\n\nconst create = newContact => {\n  const request = axios.post(baseUrl, newContact)\n  return request.then(response => response.data)\n}\n\nconst remove = id => {\n  return axios.delete(baseUrl.concat(`/${id}`))\n}\n\nconst update = newContact => {\n  const request = axios.put(baseUrl.concat(`/${newContact.id}`), newContact)\n  return request.then(response => response.data)\n}\n\nconst requests = { create, remove, update, baseUrl }\n\nexport default requests","import React from 'react'\n\nconst Notification = ({ errorMessage }) => {\n  if (errorMessage.message === null) {\n    return <div className=\"error\"></div>;\n  }\n\n  return (\n    <div className={`error ${errorMessage.success ? \"success\" : \"failure\"}`}>\n      {errorMessage.message}\n    </div>\n  )\n\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport bookService from './services/contacts'\nimport Notification from './components/Notification'\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([]) // All names and numbers\n  const [newName, setNewName] = useState('') // Control new name input\n  const [newNumber, setNewNumber] = useState('') // Control new number input\n  const [newFilter, setNewFilter] = useState('') // Control search input\n  const [errorMessage, setErrorMessage] = useState({\n    message: null, success: true\n  }) // Error message\n\n  // Fetch all contacts data in the first render\n  useEffect(() => {\n    axios.get(bookService.baseUrl)\n      .then(response => setPersons(response.data))\n  }, [])\n\n  // Those three handle the three inputs\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  // Helpers to remove, update and add to server\n  const removeFromServer = (contact) => {\n    if (window.confirm(`Delete ${contact.name}?`)) {\n      bookService\n        .remove(contact.id)\n        .then((response) => {\n          const updatedContacts = persons.filter(p => p.id !== contact.id)\n\n          setPersons(updatedContacts)\n        })\n        .catch(error => { console.log(\"Unable to remove from the server\") })\n    }\n  }\n\n  const updateToServer = (person) => {\n    const askUser = window.confirm(`${newName} is already added to phonebook, ` +\n      \"replace the old number with a new one?\")\n\n    if (askUser) {\n      const newContact = { ...person, number: newNumber }\n      bookService\n        .update(newContact)\n        .then((responseContact) => {\n          const personsList = persons.map(p => p.id !== person.id ? p : newContact)\n\n          setPersons(personsList)\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch(error => {\n          console.log(\"Unable to update to the server\")\n\n          setErrorMessage({\n            message: `Information of ${newName} has already been removed from server`,\n            success: false\n          })\n\n          setTimeout(() => {\n            setErrorMessage({ ...errorMessage, message: null })\n          }, 5000)\n\n          setNewName('')\n          setNewNumber('')\n        })\n    }\n\n  }\n\n  const addToServer = () => {\n    const newContact = { name: newName, number: newNumber }\n\n    bookService\n      .create(newContact)\n      .then(createdContact => {\n\n        setPersons(persons.concat(createdContact))\n        setNewName('')\n        setNewNumber('')\n\n        setErrorMessage({ message: `${newName} contact created`, success: true })\n\n        setTimeout(() => {\n          setErrorMessage({ ...errorMessage, message: null })\n        }, 3000)\n      })\n      .catch(error => console.log(\"Unable to save on the server\"))\n  }\n\n  // nameAlreadyExist, isInputValid and addName handle the contact submission.\n  const nameAlreadyExist = () => {\n    // const lowerCaseNames = persons.map((person) => person.name.toLowerCase())\n    // return lowerCaseNames.includes(newName.toLowerCase())\n    return false\n  }\n\n  const isInputValid = () => {\n    // Check if input isn't empty\n    // Then if name already exist the number will be updated\n    if (!newName || !newNumber) {\n      alert(\"You need to provide name and number!\")\n    } else if (nameAlreadyExist()) {\n      const person = persons.find((person) => {\n        return person.name.toLowerCase() === newName.toLowerCase()\n      })\n      updateToServer(person);\n    } else {\n      return true\n    }\n    return false\n  }\n\n  const addName = (event) => {\n    event.preventDefault()\n\n    if (isInputValid(newName, newNumber)) {\n      addToServer();\n    }\n  }\n\n  return (\n    <div className=\"wrapper\">\n\n      <h1>Phonebook</h1>\n\n      <Filter\n        newFilter={newFilter}\n        handleSearchChange={handleSearchChange}\n      />\n\n      <h2>Add a new</h2>\n\n      <PersonForm\n        addName={addName}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n\n      <Notification errorMessage={errorMessage} />\n\n      <h2>Numbers</h2>\n\n      <Persons\n        persons={persons}\n        newFilter={newFilter}\n        remove={removeFromServer}\n      />\n\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}